@model Birder2.Models.Observation
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Create";
}

<h2>Create</h2>

<h4>Observation</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ObservationDateTime" class="control-label"></label>
                <input asp-for="ObservationDateTime" class="form-control" />
                <span asp-validation-for="ObservationDateTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label"></label>
                <input asp-for="Location" class="form-control" id="loc" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Note" class="control-label"></label>
                <input asp-for="Note" class="form-control" />
                <span asp-validation-for="Note" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BirdId" class="control-label"></label>
                <select asp-for="BirdId" class="form-control" asp-items="ViewBag.BirdId"><option value="">Choose bird species...</option></select>
                <span asp-validation-for="BirdId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

<p id="pText">Test</p>
<p id="pText1">Test</p>
<p id="pText2">Test</p>
<p id="pText3">Test</p>
<hr />

<div id="floating-panel">
    @*<input onclick="clearMarkers();" type=button value="Hide Markers">
    <input onclick="showMarkers();" type=button value="Show All Markers">
    <input onclick="deleteMarkers();" type=button value="Delete Markers">*@
    <input onclick="getLocation();" type=button value="get loc">
</div>
<div id="map" class="class--map"></div>

<script>
        // In the following example, markers appear when the user clicks on the map.
        // The markers are stored in an array.
        // The user can then click an option to hide, show or delete the markers.
      var map;
      var markers = [];
      var x = document.getElementById("pText3");

      function getLocation() {
          if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(showPosition, showError);
          } else {
              x.innerHTML = "Geolocation is not supported by this browser.";
          }
      }

      function showPosition(position) {
          x.innerHTML = "Latitude: " + position.coords.latitude +
              "<br>Longitude: " + position.coords.longitude;
          var y = {lat: position.coords.latitude, lng: position.coords.longitude};
          addMarker(y)
      }

      function showError(error) {
          switch (error.code) {
              case error.PERMISSION_DENIED:
                  x.innerHTML = "User denied the request for Geolocation."
                  break;
              case error.POSITION_UNAVAILABLE:
                  x.innerHTML = "Location information is unavailable."
                  break;
              case error.TIMEOUT:
                  x.innerHTML = "The request to get user location timed out."
                  break;
              case error.UNKNOWN_ERROR:
                  x.innerHTML = "An unknown error occurred."
                  break;
          }
      }

      function initMap() {
        var haightAshbury = {lat: @UserManager.GetUserAsync(User).Result.DefaultLocationLatitude, lng: @UserManager.GetUserAsync(User).Result.DefaultLocationLongitude};  // set a user's home or default if the user has not set a default location

        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 12,
          center: haightAshbury,
          mapTypeId: 'terrain'
        });

        // This event listener will call addMarker() when the map is clicked.
        map.addListener('click', function(event) {
            addMarker(event.latLng);
        });

        // Adds a marker at the center of the map.
        addMarker(haightAshbury);
      }

      // Adds a marker to the map and push to the array.
      function addMarker(location) {
        var marker = new google.maps.Marker({
          position: location,
          map: map,
          //draggable: true
          });
        map.panTo(location)

        deleteMarkers(); // hack that prevents more than one marker being placed on the map
        markers.push(marker);
        updateForm();
        
      }

      // Sets the map on all markers in the array.
      function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers() {
            setMapOnAll(null);
        }

      // Shows any markers currently in the array.
      function showMarkers() {
            setMapOnAll(map);
        }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers() {
            clearMarkers();
            markers = [];
      }
      function updateForm() {
          document.getElementById('loc').value = markers[0].position
          document.getElementById('pText').innerHTML = markers[0].position
          document.getElementById('pText1').innerHTML = markers[0].position.lat();
          document.getElementById('pText2').innerHTML = markers[0].position.lng();
      }

</script>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
