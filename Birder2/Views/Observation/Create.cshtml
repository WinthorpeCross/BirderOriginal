@model Birder2.ViewModels.CreateObservationViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@*@{
        ViewData["Title"] = "Create";
    }*@



<h2>Create</h2>

<hr />

<div class="row">
    <div class="col-lg-12">
        <form asp-action="Create">
            @* ----> Targets the Create Action *@
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Observation.ObservationDateTime" class="control-label"></label>
                <input asp-for="Observation.ObservationDateTime" class="form-control" />
                <span asp-validation-for="Observation.ObservationDateTime" class="text-danger"></span>
            </div>
            <div class="form-group" hidden>
                @*<label asp-for="LocationLatitude" class="control-label"></label>*@
                <input asp-for="Observation.LocationLatitude" class="form-control" id="latitude" />
                @*<span asp-validation-for="LocationLatitude" class="text-danger"></span>*@
            </div>
            <div class="form-group" hidden>
                @*<label asp-for="LocationLongitude" class="control-label"></label>*@
                <input asp-for="Observation.LocationLongitude" class="form-control" id="longitude" />
                @*<span asp-validation-for="LocationLongitude" class="text-danger"></span>*@
            </div>
            <div class="form-group" spellcheck="true">
                <label asp-for="Observation.Note" class="control-label"></label>
                <input asp-for="Observation.Note" class="form-control" />
                <span asp-validation-for="Observation.Note" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Observation.BirdId" class="control-label"></label>
                @*<select asp-for="Observation.BirdId" class="form-control" asp-items="ViewBag.BirdId"><option value="">Choose bird species...</option></select>*@
                @Html.DropDownListFor(m => m.Observation.BirdId, new SelectList(Model.Birds, "BirdId", "EnglishName"),
                             new
                             {
                                 @class = "form-control selectpicker show-tick",
                                 title = "Choose a bird",
                                 data_live_search = "true",
                                 data_show_subtext = "true",
                             })
                <span asp-validation-for="Observation.BirdId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Observation.Quantity" class="control-label"></label>
                <input asp-for="Observation.Quantity" class="form-control" />
                <span asp-validation-for="Observation.Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Add another bird species" class="btn btn-default" />
            </div>

            @*<div class="form-group">
                @Html.EditorFor(m => m.MyOberservations)
            </div>*@
        </form>
    </div>
</div>


                @*< hr />
<p>partial start</p>
@if (Model != null && Model.MyOberservations != null)
{
    @foreach (var observation in Model.MyOberservations)
    {
        <div class="container">
            @Html.Partial("_Bird", observation)
            <hr />
        </div>
    }
}
<p>partial end</p>
<hr />*@



<p id="statusMessage">Test</p>
<hr />

<div id="floating-panel">
    @*<input onclick="clearMarkers();" type=button value="Hide Markers">
        <input onclick="showMarkers();" type=button value="Show All Markers">
        <input onclick="deleteMarkers();" type=button value="Delete Markers">*@
    <input onclick="getLocation();" type=button value="get loc">
</div>
<div id="map" class="class--map"></div>

<script>
      var map;
      var markers = [];
      var x = document.getElementById("statusMessage");

      function getLocation() {
          x.innerHTML = "Please wait: we're trying to get your location...";
          if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(showPosition, showError);
          } else {
              x.innerHTML = "Geolocation is not supported by this browser.";
          }
      }

      function showPosition(position) {
          //x.innerHTML = "Latitude: " + position.coords.latitude +
          //    "<br>Longitude: " + position.coords.longitude;
          //x.innerHTML = "Successfully found your location: [Replace this text with place name from Google API]";
          var y = {lat: position.coords.latitude, lng: position.coords.longitude};
          addMarker(y)
      }

      function showError(error) {
          switch (error.code) {
              case error.PERMISSION_DENIED:
                  x.innerHTML = "User denied the request for Geolocation."
                  break;
              case error.POSITION_UNAVAILABLE:
                  x.innerHTML = "Location information is unavailable."
                  break;
              case error.TIMEOUT:
                  x.innerHTML = "The request to get user location timed out."
                  break;
              case error.UNKNOWN_ERROR:
                  x.innerHTML = "An unknown error occurred."
                  break;
          }
      }

      function initMap() {
        var haightAshbury = {lat: @UserManager.GetUserAsync(User).Result.DefaultLocationLatitude, lng: @UserManager.GetUserAsync(User).Result.DefaultLocationLongitude};  // set a user's home or default if the user has not set a default location

        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 12,
          center: haightAshbury,
          mapTypeId: 'terrain'
        });

        // This event listener will call addMarker() when the map is clicked.
        map.addListener('click', function(event) {
            addMarker(event.latLng);
        });

        // Adds a marker at the center of the map.
        addMarker(haightAshbury);
      }

      // Adds a marker to the map and push to the array.
      function addMarker(location) {
        var marker = new google.maps.Marker({
          position: location,
          map: map,
          //draggable: true
          });
        map.panTo(location)

        deleteMarkers(); // hack that prevents more than one marker being placed on the map
        markers.push(marker);
        updateForm();

      }

      // Sets the map on all markers in the array.
      function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers() {
            setMapOnAll(null);
        }

      // Shows any markers currently in the array.
      function showMarkers() {
            setMapOnAll(map);
        }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers() {
            clearMarkers();
            markers = [];
      }
      function updateForm() {

          document.getElementById('latitude').value = markers[0].position.lat();
          document.getElementById('longitude').value = markers[0].position.lng();
          x.innerHTML = "Successfully found your location: [Replace this text with place name from Google API]";
      }

</script>


<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
