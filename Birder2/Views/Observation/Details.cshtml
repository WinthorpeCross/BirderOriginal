@model Birder2.Models.Observation

@{
    ViewData["Title"] = "Details";
}

<h2>Sighting Details</h2>

<p> See more information about the @Model.Bird.EnglishName and details of your sightings... </p>

<div>

    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.ObservationDateTime)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ObservationDateTime)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Note)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Note)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Bird)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Bird.EnglishName)
        </dd>
    </dl>
</div>

<hr />

<div id="map" class="class--map"></div>

<hr />

<div>
    <a asp-action="Edit" asp-route-id="@Model.ObservationId">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

<script>

    function initMap() {
        var observationLocation = { lat: @Model.LocationLatitude, lng: @Model.LocationLongitude };
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 4,
            center: observationLocation
        });

        var contentString = '<div id="content">' +
            '<div id="siteNotice">' +
            '</div>' +
            '<h4 id="firstHeading" class="firstHeading">@Model.Bird.EnglishName</h4>' +
            '<div id="bodyContent">' +
            '<p><b>Uluru</b>, also referred to as <b>Ayers Rock</b>' +
            '</div>' +
            '</div>';

        var infowindow = new google.maps.InfoWindow({
            content: contentString
        });

        var marker = new google.maps.Marker({
            position: observationLocation,
            map: map,
            //title: 'Uluru (Ayers Rock)'
        });
        marker.addListener('click', function () {
            infowindow.open(map, marker);
        });
    }


      // Sets the map on all markers in the array.
      //function setMapOnAll(map) {
      //  for (var i = 0; i < markers.length; i++) {
      //      markers[i].setMap(map);
      //  }
      //}

      // Removes the markers from the map, but keeps them in the array.
      //function clearMarkers() {
      //      setMapOnAll(null);
      //  }

      // Shows any markers currently in the array.
      //function showMarkers() {
      //      setMapOnAll(map);
      //  }

      // Deletes all markers in the array by removing references to them.
      //function deleteMarkers() {
      //      clearMarkers();
      //      markers = [];
      //}
      //function updateForm() {
      //    document.getElementById('location').value = markers[0].position
      //    document.getElementById('latitude').value = markers[0].position.lat();
      //    document.getElementById('longitude').value = markers[0].position.lng();
      //    x.innerHTML = "Successfully found your location: [Replace this text with place name from Google API]";
      //}

      function showError(error) {
          switch (error.code) {
              case error.PERMISSION_DENIED:
                  x.innerHTML = "User denied the request for Geolocation."
                  break;
              case error.POSITION_UNAVAILABLE:
                  x.innerHTML = "Location information is unavailable."
                  break;
              case error.TIMEOUT:
                  x.innerHTML = "The request to get user location timed out."
                  break;
              case error.UNKNOWN_ERROR:
                  x.innerHTML = "An unknown error occurred."
                  break;
          }
      }
</script>
